<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.24.0@462c80e31c34e58cc4f750c656be3927e80e550e">
  <file src="src/Event/Dispatcher/DirectDispatcher.php">
    <UndefinedInterfaceMethod>
      <code><![CDATA[notify]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Event/Emitter/DispatchingEmitter.php">
    <RedundantCondition>
      <code><![CDATA[assert($test instanceof TestMethod)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Event/Events/Test/HookMethod/AfterLastTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$calledMethods]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/AfterTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$calledMethods]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/BeforeFirstTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$calledMethods]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/BeforeTestMethodFinished.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$calledMethods]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/PostConditionFinished.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$calledMethods]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/HookMethod/PreConditionFinished.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$calledMethods]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/Lifecycle/DataProviderMethodFinished.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$calledMethods]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Events/Test/TestDouble/PartialMockObjectCreated.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$methodNames]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Facade.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$eventClass . 'Subscriber']]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Event/Value/Runtime/PHP.php">
    <ImpureFunctionCall>
      <code><![CDATA[get_loaded_extensions]]></code>
    </ImpureFunctionCall>
  </file>
  <file src="src/Event/Value/Telemetry/HRTime.php">
    <ImpureMethodCall>
      <code><![CDATA[fromSecondsAndNanoseconds]]></code>
      <code><![CDATA[fromSecondsAndNanoseconds]]></code>
    </ImpureMethodCall>
    <MissingThrowsDocblock>
      <code><![CDATA[Duration::fromSecondsAndNanoseconds(
            $seconds,
            $nanoseconds,
        )]]></code>
      <code><![CDATA[Duration::fromSecondsAndNanoseconds(0, 0)]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Event/Value/Telemetry/MemoryUsage.php">
    <ImpureMethodCall>
      <code><![CDATA[fromBytes]]></code>
    </ImpureMethodCall>
  </file>
  <file src="src/Event/Value/Test/TestCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$tests]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Value/Test/TestData/TestDataCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$data]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Event/Value/Test/TestMethod.php">
    <ImpureMethodCall>
      <code><![CDATA[dataFromDataProvider]]></code>
      <code><![CDATA[dataFromDataProvider]]></code>
      <code><![CDATA[hasDataFromDataProvider]]></code>
      <code><![CDATA[hasDataFromDataProvider]]></code>
    </ImpureMethodCall>
    <MissingThrowsDocblock>
      <code><![CDATA[dataFromDataProvider]]></code>
      <code><![CDATA[dataFromDataProvider]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Event/Value/TestSuite/TestSuiteBuilder.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$className]]></code>
      <code><![CDATA[$className]]></code>
      <code><![CDATA[$methodName]]></code>
      <code><![CDATA[$testSuite->name()]]></code>
      <code><![CDATA[$testSuite->name()]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Assert/Functions.php">
    <DeprecatedMethod>
      <code><![CDATA[Assert::assertStringNotMatchesFormat(...func_get_args())]]></code>
      <code><![CDATA[Assert::assertStringNotMatchesFormatFile(...func_get_args())]]></code>
    </DeprecatedMethod>
    <MissingThrowsDocblock>
      <code><![CDATA[Assert::containsOnly(...func_get_args())]]></code>
      <code><![CDATA[Assert::containsOnlyInstancesOf(...func_get_args())]]></code>
      <code><![CDATA[Assert::isInstanceOf(...func_get_args())]]></code>
      <code><![CDATA[Assert::isType(...func_get_args())]]></code>
      <code><![CDATA[Assert::logicalAnd(...func_get_args())]]></code>
      <code><![CDATA[Assert::stringEndsWith(...func_get_args())]]></code>
      <code><![CDATA[Assert::stringStartsWith(...func_get_args())]]></code>
    </MissingThrowsDocblock>
    <TooManyArguments>
      <code><![CDATA[Assert::anything(...func_get_args())]]></code>
      <code><![CDATA[Assert::directoryExists(...func_get_args())]]></code>
      <code><![CDATA[Assert::fileExists(...func_get_args())]]></code>
      <code><![CDATA[Assert::isEmpty(...func_get_args())]]></code>
      <code><![CDATA[Assert::isFalse(...func_get_args())]]></code>
      <code><![CDATA[Assert::isFinite(...func_get_args())]]></code>
      <code><![CDATA[Assert::isInfinite(...func_get_args())]]></code>
      <code><![CDATA[Assert::isJson(...func_get_args())]]></code>
      <code><![CDATA[Assert::isList(...func_get_args())]]></code>
      <code><![CDATA[Assert::isNan(...func_get_args())]]></code>
      <code><![CDATA[Assert::isNull(...func_get_args())]]></code>
      <code><![CDATA[Assert::isReadable(...func_get_args())]]></code>
      <code><![CDATA[Assert::isTrue(...func_get_args())]]></code>
      <code><![CDATA[Assert::isWritable(...func_get_args())]]></code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/Cardinality/Count.php">
    <PossiblyInvalidArgument>
      <code><![CDATA[$e->getCode()]]></code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Framework/Constraint/Exception/ExceptionMessageMatchesRegularExpression.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->regularExpression]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/Object/ObjectEquals.php">
    <MissingThrowsDocblock>
      <code><![CDATA[getMethod]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/Object/ObjectHasProperty.php">
    <MissingThrowsDocblock>
      <code><![CDATA[hasProperty]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/Constraint/Operator/BinaryOperator.php">
    <PropertyTypeCoercion>
      <code><![CDATA[array_map(
            fn ($constraint): Constraint => $this->checkConstraint($constraint),
            $constraints,
        )]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/Operator/LogicalXor.php">
    <InvalidArgument>
      <code><![CDATA[bool]]></code>
    </InvalidArgument>
  </file>
  <file src="src/Framework/Constraint/String/RegularExpression.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->pattern]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/String/StringMatchesFormatDescription.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$line]]></code>
      <code><![CDATA[$this->regularExpressionForFormatDescription(
                $this->convertNewlines($this->formatDescription),
            )]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/Traversable/TraversableContainsOnly.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$type]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/Constraint/Type/IsType.php">
    <MissingClassConstType>
      <code><![CDATA[KNOWN_TYPES = [
        'array'             => true,
        'boolean'           => true,
        'bool'              => true,
        'double'            => true,
        'float'             => true,
        'integer'           => true,
        'int'               => true,
        'null'              => true,
        'numeric'           => true,
        'object'            => true,
        'real'              => true,
        'resource'          => true,
        'resource (closed)' => true,
        'string'            => true,
        'scalar'            => true,
        'callable'          => true,
        'iterable'          => true,
    ]]]></code>
      <code><![CDATA[TYPE_ARRAY = 'array']]></code>
      <code><![CDATA[TYPE_BOOL = 'bool']]></code>
      <code><![CDATA[TYPE_CALLABLE = 'callable']]></code>
      <code><![CDATA[TYPE_CLOSED_RESOURCE = 'resource (closed)']]></code>
      <code><![CDATA[TYPE_FLOAT = 'float']]></code>
      <code><![CDATA[TYPE_INT = 'int']]></code>
      <code><![CDATA[TYPE_ITERABLE = 'iterable']]></code>
      <code><![CDATA[TYPE_NULL = 'null']]></code>
      <code><![CDATA[TYPE_NUMERIC = 'numeric']]></code>
      <code><![CDATA[TYPE_OBJECT = 'object']]></code>
      <code><![CDATA[TYPE_RESOURCE = 'resource']]></code>
      <code><![CDATA[TYPE_SCALAR = 'scalar']]></code>
      <code><![CDATA[TYPE_STRING = 'string']]></code>
    </MissingClassConstType>
  </file>
  <file src="src/Framework/DataProviderTestSuite.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$className]]></code>
      <code><![CDATA[$methodName]]></code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->providedTests]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[list<ExecutionOrderDependency>]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Framework/ExecutionOrderDependency.php">
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[empty($methodName)]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Framework/MockObject/Generator/Generator.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$className]]></code>
      <code><![CDATA[$methods]]></code>
    </ArgumentTypeCoercion>
    <MissingClassConstType>
      <code><![CDATA[EXCLUDED_METHOD_NAMES = [
        '__CLASS__'       => true,
        '__DIR__'         => true,
        '__FILE__'        => true,
        '__FUNCTION__'    => true,
        '__LINE__'        => true,
        '__METHOD__'      => true,
        '__NAMESPACE__'   => true,
        '__TRAIT__'       => true,
        '__clone'         => true,
        '__halt_compiler' => true,
    ]]]></code>
    </MissingClassConstType>
    <MissingThrowsDocblock>
      <code><![CDATA[getMethod]]></code>
      <code><![CDATA[testDouble]]></code>
      <code><![CDATA[testDouble]]></code>
      <code><![CDATA[testDouble]]></code>
      <code><![CDATA[testDouble]]></code>
      <code><![CDATA[testDouble]]></code>
      <code><![CDATA[testDouble]]></code>
      <code><![CDATA[testDouble]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/MockObject/Generator/MockBuilder.php">
    <InvalidReturnStatement>
      <code><![CDATA[$object]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[MockObject&MockedType]]></code>
    </InvalidReturnType>
  </file>
  <file src="src/Framework/MockObject/Generator/MockClass.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->mockName]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[class-string]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Framework/MockObject/Generator/MockMethod.php">
    <InvalidArgument>
      <code><![CDATA[[
                'arguments_decl'     => $this->argumentsForDeclaration,
                'arguments_call'     => $this->argumentsForCall,
                'return_declaration' => !empty($this->returnType->asString()) ? (': ' . $this->returnType->asString()) : '',
                'return_type'        => $this->returnType->asString(),
                'arguments_count'    => !empty($this->argumentsForCall) ? substr_count($this->argumentsForCall, ',') + 1 : 0,
                'class_name'         => $this->className,
                'method_name'        => $this->methodName,
                'modifier'           => $this->modifier,
                'reference'          => $this->reference,
                'deprecation'        => $deprecation,
                'return_result'      => $returnResult,
            ]]]></code>
    </InvalidArgument>
    <PossiblyFalseOperand>
      <code><![CDATA[strpos($parameterAsString, '<optional> ')]]></code>
    </PossiblyFalseOperand>
  </file>
  <file src="src/Framework/MockObject/Runtime/Builder/InvocationMocker.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$configurableMethods]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/MockObject/Runtime/Matcher.php">
    <InvalidNullableReturnType>
      <code><![CDATA[MethodName]]></code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code><![CDATA[$this->methodNameRule]]></code>
    </NullableReturnStatement>
  </file>
  <file src="src/Framework/MockObject/Runtime/ReturnValueGenerator.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$returnType]]></code>
      <code><![CDATA[$types]]></code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement>
      <code><![CDATA[(new ReflectionClass($stubClassName))->newInstanceWithoutConstructor()]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[Stub]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Framework/MockObject/Runtime/Rule/Parameters.php">
    <PropertyNotSetInConstructor>
      <code><![CDATA[$parameterVerificationResult]]></code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Framework/TestCase.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$e->getMessage()]]></code>
      <code><![CDATA[$this->expectedException]]></code>
    </ArgumentTypeCoercion>
    <MissingClassConstType>
      <code><![CDATA[LOCALE_CATEGORIES = [LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY, LC_NUMERIC, LC_TIME]]]></code>
    </MissingClassConstType>
    <MissingThrowsDocblock>
      <code><![CDATA[getMethod]]></code>
    </MissingThrowsDocblock>
    <PossiblyNullArgument>
      <code><![CDATA[$this->backupGlobalErrorHandlers]]></code>
      <code><![CDATA[$this->backupGlobalExceptionHandlers]]></code>
    </PossiblyNullArgument>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$outputBufferingLevel]]></code>
    </PropertyNotSetInConstructor>
    <PropertyTypeCoercion>
      <code><![CDATA[$backupGlobalsExcludeList]]></code>
      <code><![CDATA[$groups]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/TestRunner/SeparateProcessTestRunner.php">
    <InvalidArgument>
      <code><![CDATA[$var]]></code>
    </InvalidArgument>
    <MissingThrowsDocblock>
      <code><![CDATA[bootstrap]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Framework/TestRunner/TestRunner.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$cce->getMessage()]]></code>
      <code><![CDATA[$test->output()]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/TestSuite.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->name]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Logging/JUnit/JunitXmlLogger.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->testSuiteTimes]]></code>
    </InvalidPropertyAssignmentValue>
    <MissingThrowsDocblock>
      <code><![CDATA[dataFromDataProvider]]></code>
    </MissingThrowsDocblock>
    <RedundantCondition>
      <code><![CDATA[assert($test instanceof TestMethod)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Logging/TeamCity/TeamCityLogger.php">
    <MissingThrowsDocblock>
      <code><![CDATA[comparisonFailure]]></code>
      <code><![CDATA[comparisonFailure]]></code>
    </MissingThrowsDocblock>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$flowId]]></code>
    </PropertyNotSetInConstructor>
    <RedundantCondition>
      <code><![CDATA[assert($test instanceof TestMethod)]]></code>
      <code><![CDATA[assert($testSuite instanceof TestSuiteForTestClass)]]></code>
      <code><![CDATA[assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)]]></code>
      <code><![CDATA[assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Logging/TestDox/HtmlRenderer.php">
    <MissingClassConstType>
      <code><![CDATA[CLASS_FOOTER = <<<'EOT'
        </ul>
EOT]]></code>
      <code><![CDATA[CLASS_HEADER = <<<'EOT'

        <h2>%s</h2>
        <ul>

EOT]]></code>
      <code><![CDATA[PAGE_FOOTER = <<<'EOT'

    </body>
</html>
EOT]]></code>
      <code><![CDATA[PAGE_HEADER = <<<'EOT'
<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8"/>
        <title>Test Documentation</title>
        <style>
            body {
                text-rendering: optimizeLegibility;
                font-family: Source SansSerif Pro, Arial, sans-serif;
                font-variant-ligatures: common-ligatures;
                font-kerning: normal;
                margin-left: 2rem;
                background-color: #fff;
                color: #000;
            }

            body > ul > li {
                font-size: larger;
            }

            h2 {
                font-size: larger;
                text-decoration-line: underline;
                text-decoration-thickness: 2px;
                margin: 0;
                padding: 0.5rem 0;
            }

            ul {
                list-style: none;
                margin: 0 0 2rem;
                padding: 0 0 0 1rem;
                text-indent: -1rem;
            }

            .success:before {
                color: #4e9a06;
                content: '✓';
                padding-right: 0.5rem;
            }

            .defect {
                color: #a40000;
            }

            .defect:before {
                color: #a40000;
                content: '✗';
                padding-right: 0.5rem;
            }
        </style>
    </head>
    <body>
EOT]]></code>
    </MissingClassConstType>
  </file>
  <file src="src/Logging/TestDox/NamePrettifier.php">
    <InvalidCast>
      <code><![CDATA[$value]]></code>
    </InvalidCast>
  </file>
  <file src="src/Logging/TestDox/TestResult/TestResultCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$testResults]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Logging/TestDox/TestResult/TestResultCollector.php">
    <PossiblyNullArgument>
      <code><![CDATA[$this->status]]></code>
    </PossiblyNullArgument>
    <RedundantCondition>
      <code><![CDATA[assert($test instanceof TestMethod)]]></code>
      <code><![CDATA[assert($test instanceof TestMethod)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/CodeCoverage.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[$names]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[non-empty-list<non-empty-string>]]></code>
    </MoreSpecificReturnType>
    <RedundantCondition>
      <code><![CDATA[$metadata instanceof Covers]]></code>
      <code><![CDATA[$metadata instanceof Uses]]></code>
      <code><![CDATA[$metadata->isCovers()]]></code>
      <code><![CDATA[$metadata->isUses()]]></code>
      <code><![CDATA[assert($metadata instanceof Covers)]]></code>
      <code><![CDATA[assert($metadata instanceof Uses)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/DataProvider.php">
    <PossiblyInvalidArgument>
      <code><![CDATA[$e->getCode()]]></code>
    </PossiblyInvalidArgument>
    <PossiblyNullArgument>
      <code><![CDATA[$key]]></code>
    </PossiblyNullArgument>
    <RedundantCast>
      <code><![CDATA[(int) $matches[0][1]]]></code>
    </RedundantCast>
  </file>
  <file src="src/Metadata/Api/Dependencies.php">
    <RedundantCondition>
      <code><![CDATA[assert($metadata instanceof DependsOnClass)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/Groups.php">
    <RedundantCondition>
      <code><![CDATA[$metadata instanceof CoversFunction]]></code>
      <code><![CDATA[$metadata instanceof UsesFunction]]></code>
      <code><![CDATA[assert($metadata instanceof Covers)]]></code>
      <code><![CDATA[assert($metadata instanceof Uses)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/Requirements.php">
    <RedundantCondition>
      <code><![CDATA[assert($metadata instanceof RequiresFunction)]]></code>
      <code><![CDATA[assert($metadata instanceof RequiresMethod)]]></code>
      <code><![CDATA[assert($metadata instanceof RequiresOperatingSystem)]]></code>
      <code><![CDATA[assert($metadata instanceof RequiresOperatingSystemFamily)]]></code>
      <code><![CDATA[assert($metadata instanceof RequiresPhp)]]></code>
      <code><![CDATA[assert($metadata instanceof RequiresPhpExtension)]]></code>
      <code><![CDATA[assert($metadata instanceof RequiresPhpunit)]]></code>
      <code><![CDATA[assert($metadata instanceof RequiresSetting)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Metadata.php">
    <MissingClassConstType>
      <code><![CDATA[CLASS_LEVEL  = 0]]></code>
      <code><![CDATA[METHOD_LEVEL = 1]]></code>
    </MissingClassConstType>
  </file>
  <file src="src/Metadata/MetadataCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$metadata]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Metadata/Parser/Annotation/DocBlock.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[array_merge(
            $requires,
            ['__OFFSET' => $recordedOffsets],
            array_filter(
                [
                    'setting'            => $recordedSettings,
                    'extension_versions' => $extensionVersions,
                ],
            ),
        )]]></code>
    </InvalidPropertyAssignmentValue>
    <InvalidReturnStatement>
      <code><![CDATA[$this->parsedRequirements = array_merge(
            $requires,
            ['__OFFSET' => $recordedOffsets],
            array_filter(
                [
                    'setting'            => $recordedSettings,
                    'extension_versions' => $extensionVersions,
                ],
            ),
        )]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[array{
     *   __OFFSET: array<string, int>&array{__FILE: string},
     *   setting?: array<string, string>,
     *   extension_versions?: array<string, array{version: string, operator: string}>
     * }&array<
     *   string,
     *   string|array{version: string, operator: string}|array{constraint: string}|array<int|string, string>
     * >]]></code>
    </InvalidReturnType>
    <MissingClassConstType>
      <code><![CDATA[REGEX_REQUIRES                    = '/@requires\s+(?P<name>function|extension)\s+(?P<value>([^\s<>=!]+))\s*(?P<operator>[<>=!]{0,2})\s*(?P<version>[\d\.-]+[\d\.]?)?[ \t]*\r?$/m']]></code>
      <code><![CDATA[REGEX_REQUIRES_OS                 = '/@requires\s+(?P<name>OS(?:FAMILY)?)\s+(?P<value>.+?)[ \t]*\r?$/m']]></code>
      <code><![CDATA[REGEX_REQUIRES_SETTING            = '/@requires\s+(?P<name>setting)\s+(?P<setting>([^ ]+?))\s*(?P<value>[\w\.-]+[\w\.]?)?[ \t]*\r?$/m']]></code>
      <code><![CDATA[REGEX_REQUIRES_VERSION            = '/@requires\s+(?P<name>PHP(?:Unit)?)\s+(?P<operator>[<>=!]{0,2})\s*(?P<version>[\d\.-]+(dev|(RC|alpha|beta)[\d\.])?)[ \t]*\r?$/m']]></code>
      <code><![CDATA[REGEX_REQUIRES_VERSION_CONSTRAINT = '/@requires\s+(?P<name>PHP(?:Unit)?)\s+(?P<constraint>[\d\t \-.|~^]+)[ \t]*\r?$/m']]></code>
    </MissingClassConstType>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[empty($matches['version'])]]></code>
      <code><![CDATA[empty($requires[$matches['name']])]]></code>
      <code><![CDATA[preg_match_all('/@(?P<name>[A-Za-z_-]+)(?:[ \t]+(?P<value>.*?))?[ \t]*\r?$/m', $docBlock, $matches)]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Metadata/Parser/AnnotationParser.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$_className]]></code>
      <code><![CDATA[$_className]]></code>
      <code><![CDATA[$function]]></code>
      <code><![CDATA[$function]]></code>
      <code><![CDATA[$pieces[0]]]></code>
      <code><![CDATA[$pieces[0]]]></code>
      <code><![CDATA[$pieces[1]]]></code>
      <code><![CDATA[$pieces[1]]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[explode('::', $value)]]></code>
      <code><![CDATA[explode('::', $value)]]></code>
      <code><![CDATA[trim($tmp[0])]]></code>
      <code><![CDATA[trim($tmp[1])]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Metadata/Version/Requirement.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[!empty($matches['operator']) ? $matches['operator'] : '>=']]></code>
    </ArgumentTypeCoercion>
    <MissingClassConstType>
      <code><![CDATA[VERSION_COMPARISON = '/(?P<operator>[<>=!]{0,2})\s*(?P<version>[\d\.-]+(dev|(RC|alpha|beta)[\d\.])?)[ \t]*\r?$/m']]></code>
    </MissingClassConstType>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[empty($matches['operator'])]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/Runner/Baseline/Baseline.php">
    <MissingClassConstType>
      <code><![CDATA[VERSION = 1]]></code>
    </MissingClassConstType>
  </file>
  <file src="src/Runner/Baseline/RelativePathCalculator.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[array_merge(array_fill(0, $dotsCount, '..'), array_slice($filenameParts, $i))]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[list<non-empty-string>]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Runner/CodeCoverage.php">
    <InvalidNullableReturnType>
      <code><![CDATA[Driver]]></code>
      <code><![CDATA[\SebastianBergmann\CodeCoverage\CodeCoverage]]></code>
    </InvalidNullableReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[codeCoverageGenerationFailed]]></code>
      <code><![CDATA[codeCoverageGenerationFailed]]></code>
      <code><![CDATA[codeCoverageGenerationFailed]]></code>
      <code><![CDATA[codeCoverageGenerationFailed]]></code>
      <code><![CDATA[codeCoverageGenerationFailed]]></code>
      <code><![CDATA[codeCoverageGenerationFailed]]></code>
      <code><![CDATA[codeCoverageGenerationSucceeded]]></code>
      <code><![CDATA[codeCoverageGenerationSucceeded]]></code>
      <code><![CDATA[codeCoverageGenerationSucceeded]]></code>
      <code><![CDATA[codeCoverageGenerationSucceeded]]></code>
      <code><![CDATA[codeCoverageGenerationSucceeded]]></code>
      <code><![CDATA[codeCoverageGenerationSucceeded]]></code>
      <code><![CDATA[coverageCacheDirectory]]></code>
      <code><![CDATA[coverageClover]]></code>
      <code><![CDATA[coverageCobertura]]></code>
      <code><![CDATA[coverageCrap4j]]></code>
      <code><![CDATA[coverageHtml]]></code>
      <code><![CDATA[coverageHtmlCustomCssFile]]></code>
      <code><![CDATA[coveragePhp]]></code>
      <code><![CDATA[coverageText]]></code>
      <code><![CDATA[coverageText]]></code>
      <code><![CDATA[coverageXml]]></code>
    </MissingThrowsDocblock>
    <NullableReturnStatement>
      <code><![CDATA[$this->codeCoverage]]></code>
      <code><![CDATA[$this->driver]]></code>
    </NullableReturnStatement>
    <PossiblyNullReference>
      <code><![CDATA[start]]></code>
      <code><![CDATA[stop]]></code>
    </PossiblyNullReference>
  </file>
  <file src="src/Runner/ErrorHandler.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$errorFile]]></code>
      <code><![CDATA[$errorFile]]></code>
      <code><![CDATA[$errorFile]]></code>
      <code><![CDATA[$errorFile]]></code>
      <code><![CDATA[$errorFile]]></code>
      <code><![CDATA[$errorFile]]></code>
      <code><![CDATA[$errorFile]]></code>
      <code><![CDATA[$errorFile]]></code>
      <code><![CDATA[$errorLine]]></code>
      <code><![CDATA[$errorLine]]></code>
      <code><![CDATA[$errorLine]]></code>
      <code><![CDATA[$errorLine]]></code>
      <code><![CDATA[$errorLine]]></code>
      <code><![CDATA[$errorLine]]></code>
      <code><![CDATA[$errorLine]]></code>
      <code><![CDATA[$errorLine]]></code>
      <code><![CDATA[$errorString]]></code>
      <code><![CDATA[$errorString]]></code>
      <code><![CDATA[$errorString]]></code>
      <code><![CDATA[$errorString]]></code>
      <code><![CDATA[$errorString]]></code>
      <code><![CDATA[$errorString]]></code>
      <code><![CDATA[$errorString]]></code>
      <code><![CDATA[$errorString]]></code>
    </ArgumentTypeCoercion>
    <MissingClassConstType>
      <code><![CDATA[INSUPPRESSIBLE_LEVELS       = E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR | E_RECOVERABLE_ERROR]]></code>
      <code><![CDATA[UNHANDLEABLE_LEVELS         = E_ERROR | E_PARSE | E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_COMPILE_WARNING]]></code>
    </MissingClassConstType>
    <MissingThrowsDocblock>
      <code><![CDATA[Issue::from($file, $line, null, $description)]]></code>
      <code><![CDATA[Issue::from($file, $line, null, $description)]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Runner/Filter/GroupFilterIterator.php">
    <MissingTemplateParam>
      <code><![CDATA[GroupFilterIterator]]></code>
    </MissingTemplateParam>
  </file>
  <file src="src/Runner/Filter/NameFilterIterator.php">
    <MissingTemplateParam>
      <code><![CDATA[NameFilterIterator]]></code>
    </MissingTemplateParam>
  </file>
  <file src="src/Runner/Filter/TestIdFilterIterator.php">
    <MissingTemplateParam>
      <code><![CDATA[TestIdFilterIterator]]></code>
    </MissingTemplateParam>
  </file>
  <file src="src/Runner/PHPT/PhptTestCase.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$arguments]]></code>
      <code><![CDATA[$message]]></code>
    </ArgumentTypeCoercion>
    <InternalClass>
      <code><![CDATA[RawCodeCoverageData::fromXdebugWithoutPathCoverage([])]]></code>
      <code><![CDATA[RawCodeCoverageData::fromXdebugWithoutPathCoverage([])]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[RawCodeCoverageData::fromXdebugWithoutPathCoverage([])]]></code>
      <code><![CDATA[RawCodeCoverageData::fromXdebugWithoutPathCoverage([])]]></code>
    </InternalMethod>
    <LessSpecificReturnStatement>
      <code><![CDATA[str_replace(
            [
                '__DIR__',
                '__FILE__',
            ],
            [
                "'" . dirname($this->filename) . "'",
                "'" . $this->filename . "'",
            ],
            $code,
        )]]></code>
    </LessSpecificReturnStatement>
    <MissingThrowsDocblock>
      <code><![CDATA[bootstrap]]></code>
    </MissingThrowsDocblock>
    <MoreSpecificReturnType>
      <code><![CDATA[non-empty-string]]></code>
    </MoreSpecificReturnType>
    <PossiblyInvalidArgument>
      <code><![CDATA[$sections['FILEEOF']]]></code>
    </PossiblyInvalidArgument>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$setting[1]]]></code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/Runner/ResultCache/DefaultResultCache.php">
    <MissingClassConstType>
      <code><![CDATA[DEFAULT_RESULT_CACHE_FILENAME = '.phpunit.result.cache']]></code>
      <code><![CDATA[VERSION = 1]]></code>
    </MissingClassConstType>
  </file>
  <file src="src/Runner/TestResult/Collector.php">
    <RedundantCondition>
      <code><![CDATA[assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Runner/TestSuiteLoader.php">
    <UnresolvableInclude>
      <code><![CDATA[require_once $suiteClassFile]]></code>
    </UnresolvableInclude>
  </file>
  <file src="src/Runner/TestSuiteSorter.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$tests]]></code>
      <code><![CDATA[$this->randomize($suite->tests())]]></code>
      <code><![CDATA[$this->resolveDependencies($tests)]]></code>
      <code><![CDATA[$this->reverse($suite->tests())]]></code>
      <code><![CDATA[$this->sortByDuration($suite->tests())]]></code>
      <code><![CDATA[$this->sortBySize($suite->tests())]]></code>
      <code><![CDATA[$this->sortDefectsFirst($suite->tests())]]></code>
    </ArgumentTypeCoercion>
    <MissingClassConstType>
      <code><![CDATA[ORDER_DEFAULT = 0]]></code>
      <code><![CDATA[ORDER_DEFECTS_FIRST = 3]]></code>
      <code><![CDATA[ORDER_DURATION = 4]]></code>
      <code><![CDATA[ORDER_RANDOMIZED = 1]]></code>
      <code><![CDATA[ORDER_REVERSED = 2]]></code>
      <code><![CDATA[ORDER_SIZE = 5]]></code>
      <code><![CDATA[SIZE_SORT_WEIGHT = [
        'small'   => 1,
        'medium'  => 2,
        'large'   => 3,
        'unknown' => 4,
    ]]]></code>
    </MissingClassConstType>
  </file>
  <file src="src/TextUI/Application.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$configuration->generateBaseline()]]></code>
      <code><![CDATA[$deprecationTriggers]]></code>
    </ArgumentTypeCoercion>
    <InternalMethod>
      <code><![CDATA[nameAndVersion]]></code>
    </InternalMethod>
    <MissingThrowsDocblock>
      <code><![CDATA[DefaultPrinter::from(
                        $configuration->logfileTeamcity(),
                    )]]></code>
      <code><![CDATA[OutputFacade::printerFor($configuration->logfileJunit())]]></code>
      <code><![CDATA[atLeastVersion]]></code>
      <code><![CDATA[build]]></code>
      <code><![CDATA[configurationFile]]></code>
      <code><![CDATA[listTestsXml]]></code>
      <code><![CDATA[logEventsText]]></code>
      <code><![CDATA[logEventsText]]></code>
      <code><![CDATA[logEventsText]]></code>
      <code><![CDATA[logEventsVerboseText]]></code>
      <code><![CDATA[logEventsVerboseText]]></code>
      <code><![CDATA[logEventsVerboseText]]></code>
      <code><![CDATA[logfileJunit]]></code>
      <code><![CDATA[logfileJunit]]></code>
      <code><![CDATA[logfileTeamcity]]></code>
      <code><![CDATA[logfileTeamcity]]></code>
      <code><![CDATA[process]]></code>
      <code><![CDATA[process]]></code>
    </MissingThrowsDocblock>
    <UnresolvableInclude>
      <code><![CDATA[include_once $filename]]></code>
    </UnresolvableInclude>
  </file>
  <file src="src/TextUI/Command/Result.php">
    <MissingClassConstType>
      <code><![CDATA[CRASH     = 255]]></code>
      <code><![CDATA[EXCEPTION = 2]]></code>
      <code><![CDATA[FAILURE   = 1]]></code>
      <code><![CDATA[SUCCESS   = 0]]></code>
    </MissingClassConstType>
  </file>
  <file src="src/TextUI/Configuration/Builder.php">
    <MissingThrowsDocblock>
      <code><![CDATA[Registry::init(
                $cliConfiguration,
                $xmlConfiguration,
            )]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/TextUI/Configuration/Cli/Builder.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$options[1]]]></code>
      <code><![CDATA[$parameters]]></code>
      <code><![CDATA[$testSuffixes]]></code>
    </ArgumentTypeCoercion>
    <MissingClassConstType>
      <code><![CDATA[LONG_OPTIONS = [
        'atleast-version=',
        'bootstrap=',
        'cache-result',
        'do-not-cache-result',
        'cache-directory=',
        'check-version',
        'colors==',
        'columns=',
        'configuration=',
        'warm-coverage-cache',
        'coverage-filter=',
        'coverage-clover=',
        'coverage-cobertura=',
        'coverage-crap4j=',
        'coverage-html=',
        'coverage-php=',
        'coverage-text==',
        'only-summary-for-coverage-text',
        'show-uncovered-for-coverage-text',
        'coverage-xml=',
        'path-coverage',
        'disallow-test-output',
        'display-incomplete',
        'display-skipped',
        'display-deprecations',
        'display-errors',
        'display-notices',
        'display-warnings',
        'default-time-limit=',
        'enforce-time-limit',
        'exclude-group=',
        'filter=',
        'exclude-filter=',
        'generate-baseline=',
        'use-baseline=',
        'ignore-baseline',
        'generate-configuration',
        'globals-backup',
        'group=',
        'covers=',
        'uses=',
        'help',
        'resolve-dependencies',
        'ignore-dependencies',
        'include-path=',
        'list-groups',
        'list-suites',
        'list-test-files',
        'list-tests',
        'list-tests-xml=',
        'log-junit=',
        'log-teamcity=',
        'migrate-configuration',
        'no-configuration',
        'no-coverage',
        'no-logging',
        'no-extensions',
        'no-output',
        'no-progress',
        'no-results',
        'order-by=',
        'process-isolation',
        'dont-report-useless-tests',
        'random-order',
        'random-order-seed=',
        'reverse-order',
        'reverse-list',
        'static-backup',
        'stderr',
        'fail-on-deprecation',
        'fail-on-empty-test-suite',
        'fail-on-incomplete',
        'fail-on-notice',
        'fail-on-risky',
        'fail-on-skipped',
        'fail-on-warning',
        'stop-on-defect',
        'stop-on-deprecation',
        'stop-on-error',
        'stop-on-failure',
        'stop-on-incomplete',
        'stop-on-notice',
        'stop-on-risky',
        'stop-on-skipped',
        'stop-on-warning',
        'strict-coverage',
        'disable-coverage-ignore',
        'strict-global-state',
        'teamcity',
        'testdox',
        'testdox-html=',
        'testdox-text=',
        'test-suffix=',
        'testsuite=',
        'exclude-testsuite=',
        'log-events-text=',
        'log-events-verbose-text=',
        'version',
        'debug',
    ]]]></code>
      <code><![CDATA[SHORT_OPTIONS = 'd:c:h']]></code>
    </MissingClassConstType>
  </file>
  <file src="src/TextUI/Configuration/Cli/Configuration.php">
    <InvalidNullableReturnType>
      <code><![CDATA[bool]]></code>
      <code><![CDATA[string]]></code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code><![CDATA[$this->excludeTestSuite]]></code>
      <code><![CDATA[$this->teamCityPrinter]]></code>
    </NullableReturnStatement>
  </file>
  <file src="src/TextUI/Configuration/Cli/XmlConfigurationFileFinder.php">
    <MissingThrowsDocblock>
      <code><![CDATA[configurationFile]]></code>
      <code><![CDATA[configurationFile]]></code>
      <code><![CDATA[configurationFile]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/TextUI/Configuration/Configuration.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->testsCovering]]></code>
      <code><![CDATA[$this->testsUsing]]></code>
    </LessSpecificReturnStatement>
    <MissingClassConstType>
      <code><![CDATA[COLOR_ALWAYS  = 'always']]></code>
      <code><![CDATA[COLOR_AUTO    = 'auto']]></code>
      <code><![CDATA[COLOR_DEFAULT = self::COLOR_NEVER]]></code>
      <code><![CDATA[COLOR_NEVER   = 'never']]></code>
    </MissingClassConstType>
    <MoreSpecificReturnType>
      <code><![CDATA[list<string>]]></code>
      <code><![CDATA[list<string>]]></code>
    </MoreSpecificReturnType>
    <PossiblyInvalidPropertyAssignmentValue>
      <code><![CDATA[$columns]]></code>
    </PossiblyInvalidPropertyAssignmentValue>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[empty($this->excludeGroups)]]></code>
      <code><![CDATA[empty($this->groups)]]></code>
      <code><![CDATA[empty($this->testsCovering)]]></code>
      <code><![CDATA[empty($this->testsUsing)]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/TextUI/Configuration/Merger.php">
    <MissingThrowsDocblock>
      <code><![CDATA[baseline]]></code>
      <code><![CDATA[detect]]></code>
    </MissingThrowsDocblock>
    <PossiblyNullArgument>
      <code><![CDATA[$_SERVER['PHP_SELF']]]></code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$_SERVER['PHP_SELF']]]></code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCondition>
      <code><![CDATA[assert($xmlConfiguration instanceof LoadedFromFileConfiguration)]]></code>
    </RedundantCondition>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$candidate]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/TextUI/Configuration/Registry.php">
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$result]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/TextUI/Configuration/SourceMapper.php">
    <InvalidArgument>
      <code><![CDATA[$files]]></code>
      <code><![CDATA[$source]]></code>
      <code><![CDATA[$source]]></code>
      <code><![CDATA[$source]]></code>
      <code><![CDATA[$source]]></code>
    </InvalidArgument>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[!$file]]></code>
      <code><![CDATA[!$file]]></code>
      <code><![CDATA[!$file]]></code>
      <code><![CDATA[!$file]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/TextUI/Configuration/TestSuiteBuilder.php">
    <MissingThrowsDocblock>
      <code><![CDATA[\PHPUnit\Event\TestSuite\TestSuiteBuilder::from($testSuite)]]></code>
    </MissingThrowsDocblock>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[!$argument]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="src/TextUI/Configuration/Value/ConstantCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$constants]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/DirectoryCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$directories]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/ExtensionBootstrapCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$extensionBootstraps]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/FileCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$files]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/FilterDirectoryCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$directories]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/GroupCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$groups]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/IniSettingCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$iniSettings]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/TestDirectoryCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$directories]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/TestFileCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$files]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/TestSuiteCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$testSuites]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Value/VariableCollection.php">
    <PropertyTypeCoercion>
      <code><![CDATA[$variables]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/TextUI/Configuration/Xml/Generator.php">
    <MissingClassConstType>
      <code><![CDATA[TEMPLATE = <<<'EOT'
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/{phpunit_version}/phpunit.xsd"
         bootstrap="{bootstrap_script}"
         cacheDirectory="{cache_directory}"
         executionOrder="depends,defects"
         requireCoverageMetadata="true"
         beStrictAboutCoverageMetadata="true"
         beStrictAboutOutputDuringTests="true"
         failOnRisky="true"
         failOnWarning="true">
    <testsuites>
        <testsuite name="default">
            <directory>{tests_directory}</directory>
        </testsuite>
    </testsuites>

    <source ignoreIndirectDeprecations="true" restrictNotices="true" restrictWarnings="true">
        <include>
            <directory>{src_directory}</directory>
        </include>
    </source>
</phpunit>

EOT]]></code>
    </MissingClassConstType>
  </file>
  <file src="src/TextUI/Configuration/Xml/Loader.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$bootstrap->getAttribute('class')]]></code>
      <code><![CDATA[$deprecationTriggers]]></code>
      <code><![CDATA[$directoryNode->getAttribute('phpVersionOperator')]]></code>
      <code><![CDATA[$fileNode->getAttribute('phpVersionOperator')]]></code>
    </ArgumentTypeCoercion>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[assert($directoryNode instanceof DOMElement)]]></code>
      <code><![CDATA[assert($fileNode instanceof DOMElement)]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/MigrationBuilder.php">
    <MissingClassConstType>
      <code><![CDATA[AVAILABLE_MIGRATIONS = [
        '8.5' => [
            RemoveLogTypes::class,
        ],

        '9.2' => [
            RemoveCacheTokensAttribute::class,
            IntroduceCoverageElement::class,
            MoveAttributesFromRootToCoverage::class,
            MoveAttributesFromFilterWhitelistToCoverage::class,
            MoveWhitelistIncludesToCoverage::class,
            MoveWhitelistExcludesToCoverage::class,
            RemoveEmptyFilter::class,
            CoverageCloverToReport::class,
            CoverageCrap4jToReport::class,
            CoverageHtmlToReport::class,
            CoveragePhpToReport::class,
            CoverageTextToReport::class,
            CoverageXmlToReport::class,
            ConvertLogTypes::class,
        ],

        '9.5' => [
            RemoveListeners::class,
            RemoveTestSuiteLoaderAttributes::class,
            RemoveCacheResultFileAttribute::class,
            RemoveCoverageElementCacheDirectoryAttribute::class,
            RemoveCoverageElementProcessUncoveredFilesAttribute::class,
            IntroduceCacheDirectoryAttribute::class,
            RenameBackupStaticAttributesAttribute::class,
            RemoveBeStrictAboutResourceUsageDuringSmallTestsAttribute::class,
            RemoveBeStrictAboutTodoAnnotatedTestsAttribute::class,
            RemovePrinterAttributes::class,
            RemoveVerboseAttribute::class,
            RenameForceCoversAnnotationAttribute::class,
            RenameBeStrictAboutCoversAnnotationAttribute::class,
            RemoveConversionToExceptionsAttributes::class,
            RemoveNoInteractionAttribute::class,
            RemoveLoggingElements::class,
            RemoveTestDoxGroupsElement::class,
        ],

        '10.0' => [
            MoveCoverageDirectoriesToSource::class,
        ],

        '10.5' => [
            RemoveRegisterMockObjectsFromTestArgumentsRecursivelyAttribute::class,
        ],

        '11.0' => [
            ReplaceRestrictDeprecationsWithIgnoreDeprecations::class,
        ],
    ]]]></code>
    </MissingClassConstType>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/LogToReportMigration.php">
    <PossiblyNullReference>
      <code><![CDATA[removeChild]]></code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/MoveCoverageDirectoriesToSource.php">
    <InvalidArgument>
      <code><![CDATA[$xpath->query('//coverage/' . $element)]]></code>
    </InvalidArgument>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/RemoveEmptyFilter.php">
    <PossiblyNullReference>
      <code><![CDATA[removeChild]]></code>
      <code><![CDATA[removeChild]]></code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/ReplaceRestrictDeprecationsWithIgnoreDeprecations.php">
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[assert($source instanceof DOMElement)]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/TextUI/Configuration/Xml/SchemaFinder.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[$result]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[non-empty-list<non-empty-string>]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/TextUI/Help.php">
    <MissingClassConstType>
      <code><![CDATA[LEFT_MARGIN              = '  ']]></code>
    </MissingClassConstType>
    <PossiblyUndefinedArrayOffset>
      <code><![CDATA[$option['desc']]]></code>
      <code><![CDATA[$option['desc']]]></code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/TextUI/Output/Default/ResultPrinter.php">
    <MissingThrowsDocblock>
      <code><![CDATA[dataFromDataProvider]]></code>
    </MissingThrowsDocblock>
    <RedundantCondition>
      <code><![CDATA[assert($test instanceof TestMethod)]]></code>
      <code><![CDATA[assert($test instanceof TestMethod)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/TextUI/Output/Facade.php">
    <InvalidNullableReturnType>
      <code><![CDATA[Printer]]></code>
    </InvalidNullableReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[DefaultPrinter::standardError()]]></code>
      <code><![CDATA[DefaultPrinter::standardError()]]></code>
      <code><![CDATA[DefaultPrinter::standardError()]]></code>
      <code><![CDATA[DefaultPrinter::standardOutput()]]></code>
      <code><![CDATA[DefaultPrinter::standardOutput()]]></code>
      <code><![CDATA[DefaultPrinter::standardOutput()]]></code>
      <code><![CDATA[DefaultPrinter::standardOutput()]]></code>
      <code><![CDATA[DefaultPrinter::standardOutput()]]></code>
      <code><![CDATA[DefaultPrinter::standardOutput()]]></code>
      <code><![CDATA[new DefaultProgressPrinter(
            self::$printer,
            EventFacade::instance(),
            $configuration->colors(),
            $configuration->columns(),
            $configuration->source(),
        )]]></code>
      <code><![CDATA[new DefaultProgressPrinter(
            self::$printer,
            EventFacade::instance(),
            $configuration->colors(),
            $configuration->columns(),
            $configuration->source(),
        )]]></code>
    </MissingThrowsDocblock>
    <NullableReturnStatement>
      <code><![CDATA[self::$printer]]></code>
    </NullableReturnStatement>
  </file>
  <file src="src/TextUI/Output/Printer/DefaultPrinter.php">
    <PossiblyInvalidArgument>
      <code><![CDATA[$this->stream]]></code>
      <code><![CDATA[$this->stream]]></code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/TextUI/ShellExitCodeCalculator.php">
    <MissingClassConstType>
      <code><![CDATA[EXCEPTION_EXIT = 2]]></code>
      <code><![CDATA[FAILURE_EXIT   = 1]]></code>
      <code><![CDATA[SUCCESS_EXIT   = 0]]></code>
    </MissingClassConstType>
  </file>
  <file src="src/TextUI/TestSuiteFilterProcessor.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$configuration->excludeFilter()]]></code>
      <code><![CDATA[$configuration->excludeGroups()]]></code>
      <code><![CDATA[$configuration->filter()]]></code>
      <code><![CDATA[$configuration->groups()]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Util/Color.php">
    <MissingClassConstType>
      <code><![CDATA[WHITESPACE_EOL_MAP = [
        ' '  => '·',
        "\t" => '⇥',
        "\n" => '↵',
        "\r" => '⟵',
    ]]]></code>
      <code><![CDATA[WHITESPACE_MAP = [
        ' '  => '·',
        "\t" => '⇥',
    ]]]></code>
    </MissingClassConstType>
  </file>
  <file src="src/Util/ExcludeList.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[self::$directories]]></code>
      <code><![CDATA[self::$directories]]></code>
      <code><![CDATA[self::$directories]]></code>
    </InvalidPropertyAssignmentValue>
    <MissingClassConstType>
      <code><![CDATA[EXCLUDED_CLASS_NAMES = [
        // composer
        ClassLoader::class => 1,

        // myclabs/deepcopy
        DeepCopy::class => 1,

        // nikic/php-parser
        Parser::class => 1,

        // phar-io/manifest
        Manifest::class => 1,

        // phar-io/version
        PharIoVersion::class => 1,

        // phpunit/phpunit
        TestCase::class => 2,

        // phpunit/php-code-coverage
        CodeCoverage::class => 1,

        // phpunit/php-file-iterator
        FileIteratorFacade::class => 1,

        // phpunit/php-invoker
        Invoker::class => 1,

        // phpunit/php-text-template
        Template::class => 1,

        // phpunit/php-timer
        Timer::class => 1,

        // sebastian/cli-parser
        CliParser::class => 1,

        // sebastian/code-unit
        CodeUnit::class => 1,

        // sebastian/code-unit-reverse-lookup
        Wizard::class => 1,

        // sebastian/comparator
        Comparator::class => 1,

        // sebastian/complexity
        Calculator::class => 1,

        // sebastian/diff
        Diff::class => 1,

        // sebastian/environment
        Runtime::class => 1,

        // sebastian/exporter
        Exporter::class => 1,

        // sebastian/global-state
        Snapshot::class => 1,

        // sebastian/lines-of-code
        Counter::class => 1,

        // sebastian/object-enumerator
        Enumerator::class => 1,

        // sebastian/object-reflector
        ObjectReflector::class => 1,

        // sebastian/recursion-context
        Context::class => 1,

        // sebastian/type
        TypeName::class => 1,

        // sebastian/version
        Version::class => 1,

        // theseer/tokenizer
        Tokenizer::class => 1,
    ]]]></code>
    </MissingClassConstType>
  </file>
  <file src="src/Util/GlobalState.php">
    <MissingClassConstType>
      <code><![CDATA[DEPRECATED_INI_SETTINGS = [
        '7.3' => [
            'iconv.input_encoding'       => true,
            'iconv.output_encoding'      => true,
            'iconv.internal_encoding'    => true,
            'mbstring.func_overload'     => true,
            'mbstring.http_input'        => true,
            'mbstring.http_output'       => true,
            'mbstring.internal_encoding' => true,
            'string.strip_tags'          => true,
        ],

        '7.4' => [
            'iconv.input_encoding'       => true,
            'iconv.output_encoding'      => true,
            'iconv.internal_encoding'    => true,
            'mbstring.func_overload'     => true,
            'mbstring.http_input'        => true,
            'mbstring.http_output'       => true,
            'mbstring.internal_encoding' => true,
            'pdo_odbc.db2_instance_name' => true,
            'string.strip_tags'          => true,
        ],

        '8.0' => [
            'iconv.input_encoding'       => true,
            'iconv.output_encoding'      => true,
            'iconv.internal_encoding'    => true,
            'mbstring.http_input'        => true,
            'mbstring.http_output'       => true,
            'mbstring.internal_encoding' => true,
        ],

        '8.1' => [
            'auto_detect_line_endings'     => true,
            'filter.default'               => true,
            'iconv.input_encoding'         => true,
            'iconv.output_encoding'        => true,
            'iconv.internal_encoding'      => true,
            'mbstring.http_input'          => true,
            'mbstring.http_output'         => true,
            'mbstring.internal_encoding'   => true,
            'oci8.old_oci_close_semantics' => true,
        ],

        '8.2' => [
            'auto_detect_line_endings'     => true,
            'filter.default'               => true,
            'iconv.input_encoding'         => true,
            'iconv.output_encoding'        => true,
            'iconv.internal_encoding'      => true,
            'mbstring.http_input'          => true,
            'mbstring.http_output'         => true,
            'mbstring.internal_encoding'   => true,
            'oci8.old_oci_close_semantics' => true,
        ],

        '8.3' => [
            'auto_detect_line_endings'     => true,
            'filter.default'               => true,
            'iconv.input_encoding'         => true,
            'iconv.output_encoding'        => true,
            'iconv.internal_encoding'      => true,
            'mbstring.http_input'          => true,
            'mbstring.http_output'         => true,
            'mbstring.internal_encoding'   => true,
            'oci8.old_oci_close_semantics' => true,
        ],
    ]]]></code>
      <code><![CDATA[SUPER_GLOBAL_ARRAYS = [
        '_ENV',
        '_POST',
        '_GET',
        '_COOKIE',
        '_SERVER',
        '_FILES',
        '_REQUEST',
    ]]]></code>
    </MissingClassConstType>
  </file>
  <file src="src/Util/PHP/DefaultJobRunner.php">
    <DocblockTypeContradiction>
      <code><![CDATA[is_array($value)]]></code>
    </DocblockTypeContradiction>
    <RedundantCondition>
      <code><![CDATA[$_SERVER]]></code>
    </RedundantCondition>
    <TypeDoesNotContainNull>
      <code><![CDATA[[]]]></code>
    </TypeDoesNotContainNull>
  </file>
  <file src="src/Util/Reflection.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$filter]]></code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Util/VersionComparisonOperator.php">
    <DocblockTypeContradiction>
      <code><![CDATA[in_array($operator, ['<', 'lt', '<=', 'le', '>', 'gt', '>=', 'ge', '==', '=', 'eq', '!=', '<>', 'ne'], true)]]></code>
    </DocblockTypeContradiction>
    <NoValue>
      <code><![CDATA[$operator]]></code>
    </NoValue>
  </file>
</files>
